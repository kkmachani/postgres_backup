name: postgres-db-restore

on:
  workflow_dispatch:

jobs:
  postgres-restore:
    runs-on: ubuntu-latest
    env: 
      AZURE_STORAGE_ACCOUNT: sapgdbprodeus2
      BACKUP_DATE: ${{ github.run_id }}
      NON_PROD_DB_HOST: pg-api-cm-dev-eus2-01.postgres.database.azure.com
      PROD_DB_HOST: pg-api-cm-prod-eus2-01.postgres.database.azure.com
      PG_DB_USER: trumio_admin
      NON_PROD_DB_PWD: ${{ secrets.NON_PROD_DB_PWD }}
      PROD_DB_PWD: ${{ secrets.PROD_DB_PWD }}
      NON_PROD_CONTAINER: database-backups/nonprod
      PROD_CONTAINER: database-backups/prod
    
    steps:
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        ref: main 
    
    - name: Install Azure CLI
      run: |
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
        sudo apt-get update
        sudo apt-get install -y azure-cli

    # - name: Set Azure environment
    #   id: azure
    #   run: |
    #     if [[ "${{ vars.ENVIRONMENT }}" == "uat" || "${{ vars.ENVIRONMENT }}" == "tru-uat" || "${{ vars.ENVIRONMENT }}" == "tru-uat-auto" ]]; then
    #       echo "azure_clientid=${{ secrets.AZURE_CLIENT_ID_UAT }}" >> $GITHUB_ENV
    #       echo "azure_tenantid=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
    #       echo "azure_subscriptionid=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
    #       echo "azure_clientsecret=${{ secrets.AZURE_CLIENT_SECRET_UAT }}" >> $GITHUB_ENV
    #     else
    #       echo "azure_clientid=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
    #       echo "azure_tenantid=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
    #       echo "azure_subscriptionid=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
    #       echo "azure_clientsecret=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
    #     fi

    - name: Login to Azure
      run: az login --use-device-code
    

    # Downloading Dumps from Storage Account
    - name: Downloading DB Dumps from Blob-Storage
      run: |
        # Downloading Non-Prod Data Dumps
        mkdir -p db_dumps/non_prod
        echo "Downloading Non-Prod dumps..."
        az storage blob download-batch \
          --account-name $STORAGE_ACCOUNT \
          --auth-mode login \
          -d db_dumps/non_prod \
          -s "$CONTAINER_NAME/nonprod/$BACKUP_DATE" \
          --pattern "*.dump"
        
        # Downloading Prod Data Dumps
        mkdir -p db_dumps/prod
        echo "Downloading Prod dumps..."
        az storage blob download-batch \
         --account-name $STORAGE_ACCOUNT \
         --auth-mode login \
         -d db_dumps/prod \
         -s "$CONTAINER_NAME/prod/$BACKUP_DATE" \
         --pattern "*.dump"
    
    # Restore Non-Prod Dumps to Non-Prod DBs
    - name: Restoring Non-Prod Dumps to Non-Prod DBs
      env:
        PGPASSWORD: ${{ secrets.NON_PROD_DB_PWD }}
      run: |
        for dump_file in db_dumps/non_prod/*.dump; do
          db_name=$(basename "$dump_file" | cut -d'_' -f1)  # removes date suffix
         echo "Checking/creating DB: $db_name"
          if psql -h $NON_PROD_DB_HOST -U $PG_DB_USER -tc "SELECT 1 FROM pg_database WHERE datname = '$db_name';" | grep -q 1 || \
            echo "Database already exists. Skipping Creation"
          else
            echo "Database '$db_name' not found. Creating..."
            if psql -h $NON_PROD_DB_HOST -U $PG_DB_USER -c "CREATE DATABASE $db_name;" then
              echo "Database Created Successfully"
            else
              echo "Failed to create database '$db_name'." >&2
            exit 1
            fi
          fi
          
          echo "Restoring $dump_file into $db_name..."
          pg_restore -h $NON_PROD_DB_HOST -U $PG_DB_USER -d $db_name -c "$dump_file"
          echo "$db_name restored successfully!"
        done
    
    
    # Restore Prod Dumps to Prod DBs
    - name: Restoring Prod Dumps to Prod DBs
      env:
        PGPASSWORD: ${{ secrets.PROD_DB_PWD }}
      run: |
        for dump_file in db_dumps/prod/*.dump; do
          db_name=$(basename "$dump_file" | cut -d'_' -f1)  # removes date suffix
         echo "Checking/creating DB: $db_name"
          if psql -h $PROD_DB_HOST -U $PG_DB_USER -tc "SELECT 1 FROM pg_database WHERE datname = '$db_name';" | grep -q 1 || \
            echo "Database already exists. Skipping Creation"
          else
            echo "Database '$db_name' not found. Creating..."
            if psql -h $PROD_DB_HOST -U $PG_DB_USER -c "CREATE DATABASE $db_name;" then
              echo "Database Created Successfully"
            else
              echo "Failed to create database '$db_name'." >&2
            exit 1
            fi
          fi

          echo "Restoring $dump_file into $db_name..."
          pg_restore -h $PROD_DB_HOST -U $PG_DB_USER -d $db_name -c "$dump_file"
          echo "$db_name restored successfully!"
        done
