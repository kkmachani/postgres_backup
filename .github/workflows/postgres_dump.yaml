name: postgres-db-backup
on:
#  schedule:
  workflow_dispatch:
#    - cron: "0 0 * * 1"

jobs:
  postgres-dump:
    runs-on: ubuntu-latest
    env: 
      AZURE_STORAGE_ACCOUNT: sapgdbprodeus2
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      BACKUP_DATE: ${{ github.run_id }}
      NON_PROD_DB_HOST: pg-api-cm-dev-eus2-01.postgres.database.azure.com
      PROD_DB_HOST: pg-api-cm-prod-eus2-01.postgres.database.azure.com
      PG_DB_USER: trumio_admin
      NON_PROD_DB_PWD: ${{ secrets.NON_PROD_DB_PWD }}
      PROD_DB_PWD: ${{ secrets.PROD_DB_PWD }}
      NON_PROD_CONTAINER: database-backups/nonprod
      PROD_CONTAINER: database-backups/prod

    steps:
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        ref: main

    - name: Install Postgres tools
      run: |
       sudo apt-get update
       sudo apt-get install -y postgresql-client
       pg_dump --version


    # Dumping all Non-Prod DB Data to Dump Folders
    - name: Dump Non-Prod Databases
      env:
        PGPASSWORD: ${{ secrets.NON_PROD_DB_PWD }}
      run: |
        BACKUP_DATE=$(date +'%Y-%m-%d')

        # For Non-Prod Databases
        mkdir -p db_dumps/non_prod
        non_prod_dbs=("postgres" "knowledge_tru_dev" "analytics_tru_qa" "analytics_tru_uat" "analytics_tru_dev")
        for db in "${non_prod_dbs[@]}"; do
          echo "Dumping Non_Prod DB: $db"
            pg_dump -h $NON_PROD_DB_HOST -U $PG_DB_USER -F c $db \
            > db_dumps/non_prod/${db}_${BACKUP_DATE}.dump || exit 1
        done
        sleep 5
    
    # Dumping all Prod DB Data to Dump Folders   
    - name: Dump Prod Databases
      env:
        PGPASSWORD: ${{ secrets.PROD_DB_PWD }}s
      run: |
        BACKUP_DATE=$(date +'%Y-%m-%d')

        # For Prod Databases
        mkdir -p db_dumps/prod
        prod_dbs=("postgres" "analytics_tru_prod" "analytics_tru_lti" "analytics_tru_wipro" "analytics_tru_app_wipro")
        for db in "${prod_dbs[@]}"; do
          echo "Dumping Prod DB: $db"
            pg_dump -h $NON_PROD_DB_HOST -U $NON_PROD_DB_USER -F c $db \
            > db_dumps/prod/${db}_${BACKUP_DATE}.dump || exit 1
        done
       

    - name: Install Azure CLI
      run: |
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
        sudo apt-get update
        sudo apt-get install -y azure-cli


    - name: Set Azure environment
      id: azure
      run: |
        if [[ "${{ vars.ENVIRONMENT }}" == "uat" || "${{ vars.ENVIRONMENT }}" == "tru-uat" || "${{ vars.ENVIRONMENT }}" == "tru-uat-auto" ]]; then
          echo "azure_clientid=${{ secrets.AZURE_CLIENT_ID_UAT }}" >> $GITHUB_ENV
          echo "azure_tenantid=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "azure_subscriptionid=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "azure_clientsecret=${{ secrets.AZURE_CLIENT_SECRET_UAT }}" >> $GITHUB_ENV
        else
          echo "azure_clientid=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "azure_tenantid=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "azure_subscriptionid=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "azure_clientsecret=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        fi

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ env.azure_clientid }}","clientSecret":"${{ env.azure_clientsecret }}","subscriptionId":"${{ env.azure_subscriptionid }}","tenantId":"${{ env.azure_tenantid }}"}'
    

    - name: Upload to blob storage
      run: |
        BACKUP_DATE=$(date +'%Y-%m-%d')
        NON_PROD_CONTAINER="database-backups/nonprod"
        PROD_CONTAINER="database-backups/prod"
        
        # For Non-Prod DBs
         echo "Uploading all Non-Prod Dumps files to blob storage..."
          
         az storage blob upload-batch \
         --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
         --auth-mode login \
         -d "$NON_PROD_CONTAINER/$BACKUP_DATE" \
         --source "db_dumps/non_prod" \
         --pattern "*.dump" \
         --overwrite
        echo "Uploaded Non-Prod Dumps to Storage Account"

        # For Prod DBs
         echo "Uploading all Prod Dumps files to blob storage..."  
         az storage blob upload-batch \
         --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
         --auth-mode login \
         -d "$PROD_CONTAINER/$BACKUP_DATE" \
         --source "db_dumps/prod" \
         --pattern "*.dump" \
         --overwrite
        echo "Uploaded Prod Dumps to Storage Account"
