name: postgres-db-restore

on:
  workflow_dispatch:
    inputs:
      container:
        description: 'Container name'
        required: true
        default: database-backups
      container_path:
        description: 'Select Container Path'
        required: true
        type: choice
        options:
          - prod
          - non-prod
      postgres_host:
        description: 'Select Postgres_Host'
        required: true
        default: dump-test-server.postgres.database.azure.com
      postgres_user:
        description: 'Postgres_User'
        required: true
        default: trumio_admin
 

jobs:
  restore:
    runs-on: ubuntu-latest
    env:
      STORAGE_ACCOUNT: sapgdbprodeus2
      CONTAINER: ${{ github.event.inputs.container }}
      CONTAINER_PATH: ${{ github.event.inputs.container_path }}
      PG_HOST: ${{ github.event.inputs.postgres_host }}
      PG_USER: ${{ github.event.inputs.postgres_user }}
      PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client azure-cli jq

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Download latest dump per DB using auth-mode login
        run: |
          mkdir -p db_dumps
          echo "Listing all dump files in $CONTAINER/$CONTAINER_PATH/$BACKUP_DATE ..."

          # List all dumps in the latest backup date folder
          blobs=$(az storage blob list --account-name $STORAGE_ACCOUNT --container-name $CONTAINER --prefix "$CONTAINER_PATH/$BACKUP_DATE/" --auth-mode login --query "[].name" -o tsv)

          # Loop over unique DB names and pick latest dump for each
          for db in $(echo "$blobs" | awk -F'_' '{print $1}' | sort -u); do
             latest_dump=$(echo "$blobs" | grep "^$CONTAINER_PATH/$BACKUP_DATE/$db" | sort | tail -n1)
             echo "Downloading latest dump for DB $db: $latest_dump"
             az storage blob download --account-name $STORAGE_ACCOUNT --container-name $CONTAINER --name "$latest_dump" --file "db_dumps/$(basename $latest_dump)" --auth-mode login
          done

      - name: Restore latest dumps
        run: |
          for dump in db_dumps/*.dump; do
            db_name=$(basename "$dump" | sed -E 's/_20[0-9]{2}-[0-9]{2}-[0-9]{2}_[0-9]{2}:[0-9]{2}:[0-9]{2}Z\.dump$//')
            echo "Processing DB: $db_name"

              # Check if DB exists
              exists=$(psql -h $PG_HOST -U $PG_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$db_name'")
              if [ "$exists" != "1" ]; then
                echo "Creating database $db_name"
                psql -h $PG_HOST -U $PG_USER -c -d postgres "CREATE DATABASE \"$db_name\""
              else
                echo "Database $db_name already exists. Skipping creation."
              fi

            echo "Restoring data into $db_name..."
            pg_restore -h $PG_HOST -U $PG_USER -d $db_name "$dump"
          done

      - name: Cleanup
        run: rm -rf db_dumps
